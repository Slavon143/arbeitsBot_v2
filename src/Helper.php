<?php

namespace src;

class Helper
{

    public static function truncateText($text, $length = 2000)
    {
        // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
        $truncatedText = mb_substr($text, 0, $length);
        // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–±—Ä—ã–≤–∞ —Å–ª–æ–≤–∞
        $truncatedText = preg_replace('/\s+?(\S+)?$/', '', $truncatedText);
        return $truncatedText;
    }

    public static function flattenArray($array, $prefix = '')
    {
        $result = [];
        foreach ($array as $key => $value) {
            if (is_array($value)) {
                $result = array_merge($result, self::flattenArray($value, $prefix . $key . '_'));
            } elseif (!empty($value)) {
                $result[$prefix . $key] = $value;
            }
        }
        return $result;
    }

    public static function renameKeys($array, $renameArray)
    {
        $result = [];
        foreach ($renameArray as $oldKey => $newKey) {
            if (isset($array[$oldKey])) {
                $result[$newKey] = $array[$oldKey];
            }
        }
        return $result;
    }

    public static function processJobData($ad, $newArray)
    {
        $flattenedArray = Helper::flattenArray($ad);

        $flattenedArray['description'] = Helper::truncateText(strip_tags(str_ireplace("\n", '', $flattenedArray['description'])));
        $rename = Helper::renameKeys($flattenedArray, $newArray);

        $str = '';
        foreach ($rename as $key => $item) {
            $str .= '<b>' . $key . '</b>' . ': ' . $item . "\n";
        }
        return $str;
    }

    public static function debug($data)
    {
        file_put_contents(__DIR__ . '/classDebug.txt', var_export($data, 1));
    }

    public static function specialistDataTranslate($arr, $occupation_id, $translete)
    {

        $str = '';
        foreach ($arr as $value) {
            if ($value['id'] === $occupation_id) {
                foreach ($value['items'] as $item) {
                    $str .= $item['name'] . '////' . $item['id'] . "\r\n";
                }
            }
        }

        $strTranslate = $translete->translate($str);

        $arrTranslate = explode("\r\n", $strTranslate);
        $arr = [];
        foreach ($arrTranslate as $value) {
            $value = strip_tags($value);
            $value = explode("////", $value);
            if (isset($value[0]) && isset($value[1])) {
                $arr[] = [
                    'name' => $value[0],
                    'id' => $value[1]
                ];
            }

        }
        return $arr;

    }

    public static function getFlag($language){
        $flag_unicode = '';
        if ($language == 'uk') {
            $flag_unicode = "üá∫üá¶";
        } elseif ($language == 'ru') {
            $flag_unicode = "üá∑üá∫";
        } else {
            $flag_unicode = "üá¨üáß";
        }
        return $flag_unicode;
    }

    public static function occupationDataTranslate($array, $translete)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ
        if (empty($array)) {
            return [];
        }

        $str = '';
        foreach ($array as $key => $value) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–ª—é—á–µ–π –≤ –º–∞—Å—Å–∏–≤–µ
            if (isset($value['name'], $value['id'])) {
                $str .= $value['name'] . '////' . $value['id'] . "\r\n";
            }
        }

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É
        $transStr = $translete->translate($str);
        $transStr = explode("\r\n", $transStr);

        $res = [];
        foreach ($transStr as $value) {
            $value = strip_tags($value);
            // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª—É '&&'
            $parts = explode("////", $value);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Å–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±–µ —á–∞—Å—Ç–∏ (name –∏ id)
            if (isset($parts[0], $parts[1])) {
                $res[] = [
                    'name' => $parts[0],
                    'id' => $parts[1]
                ];
            }
        }
        return $res;
    }


    public static function translateData($data, $translate,$language,$translateKeys = false)
    {
        $str = '';
        $res = [];

        if ($translateKeys){
            foreach ($data as $value) {
                if ($value['id'] === $translateKeys) {
                    foreach ($value['items'] as $item) {
                        $str .= $item['name'] . '////' . $item['id'] . "\r\n";
                    }
                }
            }
        }else{
            foreach ($data as $value) {
                if (isset($value['name'], $value['id'])) {
                    $str .= $value['name'] . '////' . $value['id'] . "\r\n";
                }
            }
        }

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É
        $transStr = $translate->translate($str,$language);
        $transStr = explode("\r\n", $transStr);

        foreach ($transStr as $value) {
            $value = strip_tags($value);
            // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Å–∏–º–≤–æ–ª—É '////'
            $parts = explode("////", $value);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Å–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±–µ —á–∞—Å—Ç–∏ (name –∏ id)
            if (isset($parts[0], $parts[1])) {
                $res[] = [
                    'name' => $parts[0],
                    'id' => $parts[1]
                ];
            }
        }
        return $res;
    }


    public static function arrayToString($array) {
        $pairs = [];
        foreach ($array as $key => $value) {
            if (is_array($value)) {
                // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ
                foreach ($value as $subKey => $subValue) {
                    $pairs[] = urlencode($key . '[' . $subKey . ']') . '=' . urlencode($subValue);
                }
            } else {
                // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –≤–∏–¥–µ –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ
                $pairs[] = urlencode($key) . '=' . urlencode($value);
            }
        }
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—É—é —Å–∏–º–≤–æ–ª–æ–º "&"
        return implode('&', $pairs);
    }


    public static function stringToArray($string) {
        $array = [];
        $pairs = explode('&', $string);
        foreach ($pairs as $pair) {
            list($key, $value) = explode('=', $pair, 2);
            // –ï—Å–ª–∏ –∫–ª—é—á —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —ç—Ç–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
            if (strpos($key, '[') !== false && strpos($key, ']') !== false) {
                // –†–∞–∑–±–∏–≤–∞–µ–º –∫–ª—é—á –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞
                preg_match('/(\w+)\[(\w+)\]/', $key, $matches);
                // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                if (!isset($array[$matches[1]])) {
                    $array[$matches[1]] = [];
                }
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
                $array[$matches[1]][$matches[2]] = urldecode($value);
            } else {
                // –ò–Ω–∞—á–µ, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
                $array[$key] = urldecode($value);
            }
        }
        return $array;
    }

}